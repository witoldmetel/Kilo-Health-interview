
lane :ci_prod do
  # Get dist certs
  match(type: "appstore")

  # Produce production bundle
  package = load_json(json_path: "package.json")
  ENV["APP_ENV"] = "PRODUCTION"
  ENV["BUNDLE_VERSION"] = package["version"]

  # copy production firebase config
  # sh "cd .. && sh ./scripts/copyFirebaseConfigIOS.sh PROD"

  # get_certificates
  # get_provisioning_profile
  # build_app(
  #   workspace: "ios/<your_app_name_here>.xcworkspace",
  #   scheme: "<schema>",
  #   output_directory: "ios/"
  # )
  # gradle(task: "clean assembleRelease", project_dir: 'android/')

  # upload_to_testflight(skip_waiting_for_build_processing: true)
  # upload_to_play_store(track: 'internal', apk: 'android/app/build/outputs/apk/release/app-release.apk')
end

platform :ios do
  lane :prod do
    # Get dist certs
    match(type: "appstore")

    # Produce production bundle
    package = load_json(json_path: "package.json")
    ENV["APP_ENV"] = "PRODUCTION"
    ENV["BUNDLE_VERSION"] = package["version"]

    # copy production firebase config
    # sh "cd .. && sh ./scripts/copyFirebaseConfigIOS.sh PROD"

    get_certificates
    get_provisioning_profile
    build_app(
      workspace: "ios/<your_app_name_here>.xcworkspace",
      scheme: "<schema>",
      output_directory: "ios/"
    )
    upload_to_testflight(skip_waiting_for_build_processing: true)
  end

  lane :stage do
  # Get dist certs
    match(type: "appstore")

    # Produce stage bundle
    package = load_json(json_path: "package.json")
    ENV["APP_ENV"] = "STAGING"
    ENV["BUNDLE_VERSION"] = package["version"]

    # copy stage firebase config
    # sh "cd .. && sh ./scripts/copyFirebaseConfigIOS.sh"

    get_certificates
    get_provisioning_profile
    build_app(
      workspace: "ios/<your_app_name_here>.xcworkspace",
      scheme: "<schema>",
      output_directory: "ios/"
    )
    upload_to_testflight(skip_waiting_for_build_processing: true)
  end

  lane :app_icon do
    appicon(
      appicon_image_file: 'src/assets/images/app_icon/icon.png',
      appicon_devices: [:iphone, :ios_marketing],
      appicon_path: 'ios/<your_app_name>/Images.xcassets'
    )
  end
end

platform :android do
  lane :internal_prod do
    # Produce production bundle
    package = load_json(json_path: "package.json")
    ENV["APP_ENV"] = "PRODUCTION"
    ENV["BUNDLE_VERSION"] = package["version"]

    # copy production firebase config
    sh "cd .. && sh ./scripts/copyFirebaseConfigAndroid.sh PROD"

    gradle(task: "clean assembleRelease", project_dir: "android/")
    upload_to_play_store(track: 'internal', apk: 'android/app/build/outputs/apk/release/app-release.apk')
  end

  lane :internal_stage do
    # Produce stage bundle
    package = load_json(json_path: "package.json")
    ENV["APP_ENV"] = "STAGING"
    ENV["BUNDLE_VERSION"] = package["version"]

    # copy stage firebase config
    sh "cd .. && sh ./scripts/copyFirebaseConfigAndroid.sh"

    gradle(task: "clean assembleRelease", project_dir: 'android/')
    upload_to_play_store(track: 'internal', apk: 'android/app/build/outputs/apk/release/app-release.apk')
  end

  lane :app_icon do
    android_appicon(
      appicon_image_file: 'src/assets/images/app_icon/icon.png',
      appicon_icon_types: [:launcher],
      appicon_path: 'android/app/src/main/res/mipmap',
      appicon_filename: 'ic_launcher',
    )
  end

  lane :app_icon_round do
    android_appicon(
      appicon_image_file: 'src/assets/images/app_icon/round_icon.png',
      appicon_icon_types: [:launcher],
      appicon_path: 'android/app/src/main/res/mipmap',
      appicon_filename: 'ic_launcher_round',
    )
  end

  lane :app_notif_icon do
      android_appicon(
        appicon_image_file: 'src/assets/images/app_icon/icon_notif.png',
        appicon_icon_types: [:notification],
        appicon_path: 'android/app/src/main/res/mipmap',
        appicon_filename: 'ic_notif',
      )
    end
end
